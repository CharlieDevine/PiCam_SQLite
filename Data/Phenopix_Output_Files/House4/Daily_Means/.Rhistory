library(xts)
library(ggplot2)
library(ggpubr)
library(ggthemes)
# -----------------------------------------
# Get hyperspectral and PiCam GCC datasets
# -----------------------------------------
# Hyperspectral data
hs.fp = 'C:/Users/cjdev/Desktop/RainManSR/Hyperspectral/Data'
setwd(hs.fp)
hs.files = list.files(hs.fp, pattern = '.csv')
ndvi = read.csv(hs.files[4])
hs.gcc = read.csv(hs.files[2])
ecophys.dates = as.Date(ndvi[,1])
ecophys.plots = colnames(ndvi)[2:length(colnames(ndvi))]
# PiCam GCC data
pc.fp = 'C:/Users/cjdev/Desktop/RainManSR/Pi_Pics/Appended_Data_Master_Files'
# House 1
setwd(paste(pc.fp,'House1','20201002','Daily_Means',sep = '/'))
h1.files = list.files()
h1p4 = read.table(h1.files[4], header = TRUE)[,10]
h1p2 = read.table(h1.files[2], header = TRUE)[,10]
h1p1 = read.table(h1.files[1], header = TRUE)[,10]
h1p10 = read.table(h1.files[10], header = TRUE)[,10]
pc.dates = as.Date(read.table(h1.files[10], header = TRUE)[,1])
# House 2
setwd(paste(pc.fp,'House2','20201002','Daily_Means',sep = '/'))
h2.files = list.files()
h2p4 = read.table(h2.files[4], header = TRUE)[,10]
h2p2 = read.table(h2.files[2], header = TRUE)[,10]
h2p3 = read.table(h2.files[3], header = TRUE)[,10]
h2p6 = read.table(h2.files[6], header = TRUE)[,10]
# House 3
setwd(paste(pc.fp,'House3','20201002','Daily_Means',sep = '/'))
h3.files = list.files()
h3p11 = read.table(h3.files[11], header = TRUE)[,10]
h3p9 = read.table(h3.files[9], header = TRUE)[,10]
h3p10 = read.table(h3.files[10], header = TRUE)[,10]
h3p7 = read.table(h3.files[7], header = TRUE)[,10]
View(ndvi)
# House 4
setwd(paste(pc.fp,'House4','20201002','Daily_Means',sep = '/'))
h4.files = list.files()
h4p10 = read.table(h4.files[10], header = TRUE)[,10]
h4p3 = read.table(h4.files[3], header = TRUE)[,10]
h4p2 = read.table(h4.files[2], header = TRUE)[,10]
h4p11 = read.table(h4.files[11], header = TRUE)[,10]
# House 5
setwd(paste(pc.fp,'House5','20201002','Daily_Means',sep = '/'))
h5.files = list.files()
h5p8 = read.table(h5.files[8], header = TRUE)[,10]
h5p9 = read.table(h5.files[9], header = TRUE)[,10]
h5p1 = read.table(h5.files[1], header = TRUE)[,10]
h5p2 = read.table(h5.files[2], header = TRUE)[,10]
# Combine PiCam GCC data into single data frame
pc.gcc = data.frame(pc.dates,
h1p4,h2p4,h3p11,h4p10,h5p8,
h1p2,h2p2,h3p9,h4p3,h5p9,
h1p10,h2p3,h3p10,h4p2,h5p1,
h1p1,h2p6,h3p7,h4p11,h5p2)
length(h4p10)
length(h5p8)
h5p8
h5p8 = read.table(h5.files[8], header = TRUE)
h5p8 = read.table(h5.files[8], header = TRUE)[,10]
# House 4
setwd(paste(pc.fp,'House4','20201002','Daily_Means',sep = '/'))
h4p10 = read.table(h4.files[10], header = TRUE)
View(h4p10)
# Combine PiCam GCC data into single data frame
pc.gcc = data.frame(pc.dates,
h1p4,h2p4,h3p11,h4.na,h5p8,
h1p2,h2p2,h3p9,h4.na,h5p9,
h1p10,h2p3,h3p10,h4.na,h5p1,
h1p1,h2p6,h3p7,h4.na,h5p2)
h4.na = rep(NA,length(pc.dates))
# Combine PiCam GCC data into single data frame
pc.gcc = data.frame(pc.dates,
h1p4,h2p4,h3p11,h4.na,h5p8,
h1p2,h2p2,h3p9,h4.na,h5p9,
h1p10,h2p3,h3p10,h4.na,h5p1,
h1p1,h2p6,h3p7,h4.na,h5p2)
colnames(pc.gcc) = c('Date',ecophys.plots)
# Subset by ecophysiology dates
pc.gcc.ecophys.days = pc.gcc[pc.gcc$Date %in% ecophys.dates,]
# -----------------------------------------------------------------------------
# Generate plots for each watering treatment
# Panel 1: Timeseries of PiCam GCC (one line per house)
# Panel 2: Timeseries of hyperspectral GCC (one line per house)
# Panel 3: Scatterplot of PiCam vs. hyperspectral GCC (color coded per house)
# -----------------------------------------------------------------------------
h1.col = 'forestgreen'
h2.col = 'steelblue'
h3.col = 'tomato'
h4.col = 'grey32'
h5.col = 'gold'
ts.pch = 5
# PiCam vs. hyperspectral GCC scatterplot
sp.pch = 16
sp.cex = 1.25
gcc.sp.fun = function(pc.gcc.ecophys.days, hs.gcc, treatment){
sp.ax.lim = c(0.31,0.355)
leg.cex = 1.3
lm.lty = 2
if (treatment == 'S1'){
h1.gcc.lm = lm(hs.gcc[,2] ~ pc.gcc.ecophys.days[,2])
h1.gcc.rsqrd = round(summary(h1.gcc.lm)$r.squared,2)
h2.gcc.lm = lm(hs.gcc[,3] ~ pc.gcc.ecophys.days[,3])
h2.gcc.rsqrd = round(summary(h2.gcc.lm)$r.squared,2)
h3.gcc.lm = lm(hs.gcc[,4] ~ pc.gcc.ecophys.days[,4])
h3.gcc.rsqrd = round(summary(h3.gcc.lm)$r.squared,2)
h5.gcc.lm = lm(hs.gcc[,6] ~ pc.gcc.ecophys.days[,6])
h5.gcc.rsqrd = round(summary(h5.gcc.lm)$r.squared,2)
plot(x = pc.gcc.ecophys.days[,2], y = hs.gcc[,2],
main = 'PiCam vs. Hyperspectral GCC', xlab = 'Hyperspectral GCC', ylab = 'PiCam GCC',
xlim = sp.ax.lim, ylim = sp.ax.lim, pch = sp.pch, cex = sp.cex, col = h1.col)
abline(h1.gcc.lm, col = h1.col, lty = lm.lty)
points(x = pc.gcc.ecophys.days[,3], y = hs.gcc[,3], pch = sp.pch, cex = sp.cex, col = h2.col)
abline(h2.gcc.lm, col = h2.col, lty = lm.lty)
points(x = pc.gcc.ecophys.days[,4], y = hs.gcc[,4], pch = sp.pch, cex = sp.cex, col = h3.col)
abline(h3.gcc.lm, col = h3.col, lty = lm.lty)
points(x = pc.gcc.ecophys.days[,6], y = hs.gcc[,6], pch = sp.pch, cex = sp.cex, col = h5.col)
abline(h5.gcc.lm, col = h5.col, lty = lm.lty)
legend('bottomright',
legend = c(as.expression(bquote(R^2 == .(h1.gcc.rsqrd))),
as.expression(bquote(R^2 == .(h2.gcc.rsqrd))),
as.expression(bquote(R^2 == .(h3.gcc.rsqrd))),
as.expression(bquote(R^2 == .(h5.gcc.rsqrd)))),
pch = sp.pch, col = c(h1.col,h2.col,h3.col,h5.col), cex = leg.cex,
bty = 'n')
legend('topleft', legend = 'S1', cex = leg.cex, bty = 'n')
}
if (treatment == 'S2'){
h1.gcc.lm = lm(hs.gcc[,7] ~ pc.gcc.ecophys.days[,7])
h1.gcc.rsqrd = round(summary(h1.gcc.lm)$r.squared,2)
h2.gcc.lm = lm(hs.gcc[,8] ~ pc.gcc.ecophys.days[,8])
h2.gcc.rsqrd = round(summary(h2.gcc.lm)$r.squared,2)
h3.gcc.lm = lm(hs.gcc[,9] ~ pc.gcc.ecophys.days[,9])
h3.gcc.rsqrd = round(summary(h3.gcc.lm)$r.squared,2)
h5.gcc.lm = lm(hs.gcc[,11] ~ pc.gcc.ecophys.days[,11])
h5.gcc.rsqrd = round(summary(h5.gcc.lm)$r.squared,2)
plot(x = pc.gcc.ecophys.days[,7], y = hs.gcc[,7],
main = 'PiCam vs. Hyperspectral GCC', xlab = 'Hyperspectral GCC', ylab = 'PiCam GCC',
xlim = sp.ax.lim, ylim = sp.ax.lim, pch = sp.pch, cex = sp.cex, col = h1.col)
abline(h1.gcc.lm, col = h1.col, lty = lm.lty)
points(x = pc.gcc.ecophys.days[,8], y = hs.gcc[,8], pch = sp.pch, cex = sp.cex, col = h2.col)
abline(h2.gcc.lm, col = h2.col, lty = lm.lty)
points(x = pc.gcc.ecophys.days[,9], y = hs.gcc[,9], pch = sp.pch, cex = sp.cex, col = h3.col)
abline(h3.gcc.lm, col = h3.col, lty = lm.lty)
points(x = pc.gcc.ecophys.days[,11], y = hs.gcc[,11], pch = sp.pch, cex = sp.cex, col = h5.col)
abline(h5.gcc.lm, col = h5.col, lty = lm.lty)
legend('bottomright',
legend = c(as.expression(bquote(R^2 == .(h1.gcc.rsqrd))),
as.expression(bquote(R^2 == .(h2.gcc.rsqrd))),
as.expression(bquote(R^2 == .(h3.gcc.rsqrd))),
as.expression(bquote(R^2 == .(h5.gcc.rsqrd)))),
pch = sp.pch, col = c(h1.col,h2.col,h3.col,h5.col), cex = leg.cex,
bty = 'n')
legend('topleft', legend = 'S2', cex = leg.cex, bty = 'n')
}
if (treatment == 'S3'){
h1.gcc.lm = lm(hs.gcc[,12] ~ pc.gcc.ecophys.days[,12])
h1.gcc.rsqrd = round(summary(h1.gcc.lm)$r.squared,2)
h2.gcc.lm = lm(hs.gcc[,13] ~ pc.gcc.ecophys.days[,13])
h2.gcc.rsqrd = round(summary(h2.gcc.lm)$r.squared,2)
h3.gcc.lm = lm(hs.gcc[,14] ~ pc.gcc.ecophys.days[,14])
h3.gcc.rsqrd = round(summary(h3.gcc.lm)$r.squared,2)
h5.gcc.lm = lm(hs.gcc[,16] ~ pc.gcc.ecophys.days[,16])
h5.gcc.rsqrd = round(summary(h5.gcc.lm)$r.squared,2)
plot(x = pc.gcc.ecophys.days[,12], y = hs.gcc[,12],
main = 'PiCam vs. Hyperspectral GCC', xlab = 'Hyperspectral GCC', ylab = 'PiCam GCC',
xlim = sp.ax.lim, ylim = sp.ax.lim, pch = sp.pch, cex = sp.cex, col = h1.col)
abline(h1.gcc.lm, col = h1.col, lty = lm.lty)
points(x = pc.gcc.ecophys.days[,13], y = hs.gcc[,13], pch = sp.pch, cex = sp.cex, col = h2.col)
abline(h2.gcc.lm, col = h2.col, lty = lm.lty)
points(x = pc.gcc.ecophys.days[,14], y = hs.gcc[,14], pch = sp.pch, cex = sp.cex, col = h3.col)
abline(h3.gcc.lm, col = h3.col, lty = lm.lty)
points(x = pc.gcc.ecophys.days[,16], y = hs.gcc[,16], pch = sp.pch, cex = sp.cex, col = h5.col)
abline(h5.gcc.lm, col = h5.col, lty = lm.lty)
legend('bottomright',
legend = c(as.expression(bquote(R^2 == .(h1.gcc.rsqrd))),
as.expression(bquote(R^2 == .(h2.gcc.rsqrd))),
as.expression(bquote(R^2 == .(h3.gcc.rsqrd))),
as.expression(bquote(R^2 == .(h5.gcc.rsqrd)))),
pch = sp.pch, col = c(h1.col,h2.col,h3.col,h5.col), cex = leg.cex,
bty = 'n')
legend('topleft', legend = 'S3', cex = leg.cex, bty = 'n')
}
if (treatment == 'S4'){
h1.gcc.lm = lm(hs.gcc[,17] ~ pc.gcc.ecophys.days[,17])
h1.gcc.rsqrd = round(summary(h1.gcc.lm)$r.squared,2)
h2.gcc.lm = lm(hs.gcc[,18] ~ pc.gcc.ecophys.days[,18])
h2.gcc.rsqrd = round(summary(h2.gcc.lm)$r.squared,2)
h3.gcc.lm = lm(hs.gcc[,19] ~ pc.gcc.ecophys.days[,19])
h3.gcc.rsqrd = round(summary(h3.gcc.lm)$r.squared,2)
h5.gcc.lm = lm(hs.gcc[,21] ~ pc.gcc.ecophys.days[,21])
h5.gcc.rsqrd = round(summary(h5.gcc.lm)$r.squared,2)
plot(x = pc.gcc.ecophys.days[,17], y = hs.gcc[,17],
main = 'PiCam vs. Hyperspectral GCC', xlab = 'Hyperspectral GCC', ylab = 'PiCam GCC',
xlim = sp.ax.lim, ylim = sp.ax.lim, pch = sp.pch, cex = sp.cex, col = h1.col)
abline(h1.gcc.lm, col = h1.col, lty = lm.lty)
points(x = pc.gcc.ecophys.days[,18], y = hs.gcc[,18], pch = sp.pch, cex = sp.cex, col = h2.col)
abline(h2.gcc.lm, col = h2.col, lty = lm.lty)
points(x = pc.gcc.ecophys.days[,19], y = hs.gcc[,19], pch = sp.pch, cex = sp.cex, col = h3.col)
abline(h3.gcc.lm, col = h3.col, lty = lm.lty)
points(x = pc.gcc.ecophys.days[,21], y = hs.gcc[,21], pch = sp.pch, cex = sp.cex, col = h5.col)
abline(h5.gcc.lm, col = h5.col, lty = lm.lty)
legend('bottomright',
legend = c(as.expression(bquote(R^2 == .(h1.gcc.rsqrd))),
as.expression(bquote(R^2 == .(h2.gcc.rsqrd))),
as.expression(bquote(R^2 == .(h3.gcc.rsqrd))),
as.expression(bquote(R^2 == .(h5.gcc.rsqrd)))),
pch = sp.pch, col = c(h1.col,h2.col,h3.col,h5.col), cex = leg.cex,
bty = 'n')
legend('topleft', legend = 'S4', cex = leg.cex, bty = 'n')
}
}
gcc.sp.fun(pc.gcc.ecophys.days, hs.gcc, 'S1')
gcc.sp.fun(pc.gcc.ecophys.days, hs.gcc, 'S2')
gcc.sp.fun(pc.gcc.ecophys.days, hs.gcc, 'S3')
gcc.sp.fun(pc.gcc.ecophys.days, hs.gcc, 'S4')
# PiCam GCC data
pc.fp = 'C:/Users/cjdev/Desktop/RainManSR/Pi_Pics/Appended_Data_Master_Files'
# House 4
setwd(paste(pc.fp,'House4','20201002','Daily_Means',sep = '/'))
h4.files = list.files()
length(h4.files)
h4.files = list.files()
test = read.table(h4.files[13], header = TRUE)
View(test)
test = read.table(h4.files[9], header = TRUE)
View(test)
test = read.table(h4.files[10], header = TRUE)
View(test)
test = test[c(seq(1,82,1),seq(84,95,1))]
test = test[c(seq(1,82,1),seq(84,95,1)),]
View(test)
h4.files[10]
out.name = 'House4_Plot10_20200701_to_20201002_Daily_Means_new.txt'
write.table(test, out.name, col.names = TRUE, row.names = FALSE)
list.files()
h4.files = list.files()
new = read.table(h4.files[11], header = TRUE)
View(new)
h4.files = list.files()
hh4.files
h4.files
test = read.table(h4.files[9], header = TRUE)
test = test[c(seq(1,82,1),seq(84,95,1)),]
out.name = 'House4_Plot09_20200701_to_20201002_Daily_Means_new.txt'
write.table(test, out.name, col.names = TRUE, row.names = FALSE)
